// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_search_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoReply_GroupInfo_search_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_search_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SearchReply_User_search_2eproto;
namespace pb {
class SizeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SizeReply> _instance;
} _SizeReply_default_instance_;
class NullDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Null> _instance;
} _Null_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class NomalReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NomalReply> _instance;
} _NomalReply_default_instance_;
class StringsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringsReply> _instance;
} _StringsReply_default_instance_;
class GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Group> _instance;
} _Group_default_instance_;
class UserListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserListReq> _instance;
} _UserListReq_default_instance_;
class SearchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRequest> _instance;
} _SearchRequest_default_instance_;
class SearchReply_UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReply_User> _instance;
} _SearchReply_User_default_instance_;
class SearchReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReply> _instance;
} _SearchReply_default_instance_;
class InfoReply_GroupInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoReply_GroupInfo> _instance;
} _InfoReply_GroupInfo_default_instance_;
class InfoReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoReply> _instance;
} _InfoReply_default_instance_;
}  // namespace pb
static void InitDefaultsSizeReply_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SizeReply_default_instance_;
    new (ptr) ::pb::SizeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SizeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SizeReply_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSizeReply_search_2eproto}, {}};

static void InitDefaultsNull_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Null_default_instance_;
    new (ptr) ::pb::Null();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Null::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Null_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNull_search_2eproto}, {}};

static void InitDefaultsFeature_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Feature_default_instance_;
    new (ptr) ::pb::Feature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Feature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Feature_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFeature_search_2eproto}, {}};

static void InitDefaultsUserInfo_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_UserInfo_default_instance_;
    new (ptr) ::pb::UserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::UserInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserInfo_search_2eproto}, {}};

static void InitDefaultsNomalReply_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_NomalReply_default_instance_;
    new (ptr) ::pb::NomalReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::NomalReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NomalReply_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNomalReply_search_2eproto}, {}};

static void InitDefaultsStringsReply_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_StringsReply_default_instance_;
    new (ptr) ::pb::StringsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::StringsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StringsReply_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStringsReply_search_2eproto}, {}};

static void InitDefaultsGroup_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Group_default_instance_;
    new (ptr) ::pb::Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Group_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroup_search_2eproto}, {}};

static void InitDefaultsUserListReq_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_UserListReq_default_instance_;
    new (ptr) ::pb::UserListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::UserListReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserListReq_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserListReq_search_2eproto}, {}};

static void InitDefaultsSearchRequest_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SearchRequest_default_instance_;
    new (ptr) ::pb::SearchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SearchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SearchRequest_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSearchRequest_search_2eproto}, {}};

static void InitDefaultsSearchReply_User_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SearchReply_User_default_instance_;
    new (ptr) ::pb::SearchReply_User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SearchReply_User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SearchReply_User_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSearchReply_User_search_2eproto}, {}};

static void InitDefaultsSearchReply_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SearchReply_default_instance_;
    new (ptr) ::pb::SearchReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SearchReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SearchReply_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSearchReply_search_2eproto}, {
      &scc_info_SearchReply_User_search_2eproto.base,}};

static void InitDefaultsInfoReply_GroupInfo_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InfoReply_GroupInfo_default_instance_;
    new (ptr) ::pb::InfoReply_GroupInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::InfoReply_GroupInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InfoReply_GroupInfo_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfoReply_GroupInfo_search_2eproto}, {}};

static void InitDefaultsInfoReply_search_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InfoReply_default_instance_;
    new (ptr) ::pb::InfoReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::InfoReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InfoReply_search_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInfoReply_search_2eproto}, {
      &scc_info_InfoReply_GroupInfo_search_2eproto.base,}};

void InitDefaults_search_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SizeReply_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Null_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feature_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserInfo_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NomalReply_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringsReply_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Group_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserListReq_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchRequest_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchReply_User_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchReply_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoReply_GroupInfo_search_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoReply_search_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_search_2eproto[13];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_search_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_search_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_search_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SizeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SizeReply, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Null, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Feature, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UserInfo, group_),
  PROTOBUF_FIELD_OFFSET(::pb::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::pb::UserInfo, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::NomalReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::NomalReply, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::StringsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::StringsReply, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Group, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UserListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UserListReq, group_),
  PROTOBUF_FIELD_OFFSET(::pb::UserListReq, skey_),
  PROTOBUF_FIELD_OFFSET(::pb::UserListReq, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, group_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchRequest, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SearchReply_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SearchReply_User, name_),
  PROTOBUF_FIELD_OFFSET(::pb::SearchReply_User, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SearchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SearchReply, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply_GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply_GroupInfo, name_),
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply_GroupInfo, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply, groupslen_),
  PROTOBUF_FIELD_OFFSET(::pb::InfoReply, groups_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::SizeReply)},
  { 6, -1, sizeof(::pb::Null)},
  { 11, -1, sizeof(::pb::Feature)},
  { 17, -1, sizeof(::pb::UserInfo)},
  { 25, -1, sizeof(::pb::NomalReply)},
  { 31, -1, sizeof(::pb::StringsReply)},
  { 37, -1, sizeof(::pb::Group)},
  { 43, -1, sizeof(::pb::UserListReq)},
  { 51, -1, sizeof(::pb::SearchRequest)},
  { 58, -1, sizeof(::pb::SearchReply_User)},
  { 65, -1, sizeof(::pb::SearchReply)},
  { 71, -1, sizeof(::pb::InfoReply_GroupInfo)},
  { 78, -1, sizeof(::pb::InfoReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SizeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Null_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_NomalReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_StringsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_UserListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SearchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SearchReply_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SearchReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InfoReply_GroupInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_InfoReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_search_2eproto = {
  {}, AddDescriptors_search_2eproto, "search.proto", schemas,
  file_default_instances, TableStruct_search_2eproto::offsets,
  file_level_metadata_search_2eproto, 13, file_level_enum_descriptors_search_2eproto, file_level_service_descriptors_search_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_search_2eproto = {
  false, InitDefaults_search_2eproto, 
  "\n\014search.proto\022\002pb\"\031\n\tSizeReply\022\014\n\004size\030"
  "\001 \001(\004\"\006\n\004Null\"\032\n\007Feature\022\017\n\007feature\030\001 \003("
  "\002\"6\n\010UserInfo\022\r\n\005group\030\001 \001(\t\022\n\n\002id\030\002 \001(\t"
  "\022\017\n\007feature\030\003 \003(\002\"\031\n\nNomalReply\022\013\n\003ret\030\001"
  " \001(\010\"\036\n\014StringsReply\022\016\n\006values\030\001 \003(\t\"\026\n\005"
  "Group\022\r\n\005group\030\001 \001(\t\"7\n\013UserListReq\022\r\n\005g"
  "roup\030\001 \001(\t\022\014\n\004skey\030\002 \001(\t\022\013\n\003num\030\003 \001(\005\"/\n"
  "\rSearchRequest\022\r\n\005group\030\001 \001(\t\022\017\n\007feature"
  "\030\002 \003(\002\"Z\n\013SearchReply\022#\n\005users\030\001 \003(\0132\024.p"
  "b.SearchReply.User\032&\n\004User\022\014\n\004name\030\001 \001(\t"
  "\022\020\n\010distance\030\002 \001(\002\"o\n\tInfoReply\022\021\n\tGroup"
  "sLen\030\001 \001(\005\022\'\n\006groups\030\002 \003(\0132\027.pb.InfoRepl"
  "y.GroupInfo\032&\n\tGroupInfo\022\014\n\004name\030\001 \001(\t\022\013"
  "\n\003len\030\002 \001(\0052\210\003\n\006Facedb\022.\n\006Search\022\021.pb.Se"
  "archRequest\032\017.pb.SearchReply\"\000\022)\n\tGroupL"
  "ist\022\010.pb.Null\032\020.pb.StringsReply\"\000\022)\n\007Add"
  "User\022\014.pb.UserInfo\032\016.pb.NomalReply\"\000\022\'\n\007"
  "GetUser\022\014.pb.UserInfo\032\014.pb.UserInfo\"\000\022)\n"
  "\007DelUser\022\014.pb.UserInfo\032\016.pb.NomalReply\"\000"
  "\022/\n\010UserList\022\017.pb.UserListReq\032\020.pb.Strin"
  "gsReply\"\000\022\'\n\010DelGroup\022\t.pb.Group\032\016.pb.No"
  "malReply\"\000\022\'\n\tGroupSize\022\t.pb.Group\032\r.pb."
  "SizeReply\"\000\022!\n\004Info\022\010.pb.Null\032\r.pb.InfoR"
  "eply\"\000b\006proto3"
,
  "search.proto", &assign_descriptors_table_search_2eproto, 934,
};

void AddDescriptors_search_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_search_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_search_2eproto = []() { AddDescriptors_search_2eproto(); return true; }();
namespace pb {

// ===================================================================

void SizeReply::InitAsDefaultInstance() {
}
class SizeReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SizeReply::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SizeReply::SizeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SizeReply)
}
SizeReply::SizeReply(const SizeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:pb.SizeReply)
}

void SizeReply::SharedCtor() {
  size_ = PROTOBUF_ULONGLONG(0);
}

SizeReply::~SizeReply() {
  // @@protoc_insertion_point(destructor:pb.SizeReply)
  SharedDtor();
}

void SizeReply::SharedDtor() {
}

void SizeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SizeReply& SizeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SizeReply_search_2eproto.base);
  return *internal_default_instance();
}


void SizeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SizeReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SizeReply*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_size(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SizeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SizeReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SizeReply)
}

::google::protobuf::uint8* SizeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SizeReply)
  return target;
}

size_t SizeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SizeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SizeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SizeReply* source =
      ::google::protobuf::DynamicCastToGenerated<SizeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SizeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SizeReply)
    MergeFrom(*source);
  }
}

void SizeReply::MergeFrom(const SizeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SizeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeReply::CopyFrom(const SizeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeReply::IsInitialized() const {
  return true;
}

void SizeReply::Swap(SizeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeReply::InternalSwap(SizeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata SizeReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Null::InitAsDefaultInstance() {
}
class Null::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Null::Null()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Null)
}
Null::Null(const Null& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Null)
}

void Null::SharedCtor() {
}

Null::~Null() {
  // @@protoc_insertion_point(destructor:pb.Null)
  SharedDtor();
}

void Null::SharedDtor() {
}

void Null::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Null& Null::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Null_search_2eproto.base);
  return *internal_default_instance();
}


void Null::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Null)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Null::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Null*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Null::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Null)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Null)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Null)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Null::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Null)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Null)
}

::google::protobuf::uint8* Null::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Null)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Null)
  return target;
}

size_t Null::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Null)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Null::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Null)
  GOOGLE_DCHECK_NE(&from, this);
  const Null* source =
      ::google::protobuf::DynamicCastToGenerated<Null>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Null)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Null)
    MergeFrom(*source);
  }
}

void Null::MergeFrom(const Null& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Null)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Null::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Null)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Null::CopyFrom(const Null& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Null)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Null::IsInitialized() const {
  return true;
}

void Null::Swap(Null* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Null::InternalSwap(Null* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Null::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
}
class Feature::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Feature)
}

void Feature::SharedCtor() {
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:pb.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Feature_search_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Feature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Feature*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated float feature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_feature();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        do {
          float val;
          std::memcpy(&val, ptr, 4);
          ptr += 4;
          msg->add_feature(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Feature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Feature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float feature = 1;
  if (this->feature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->feature().data(), this->feature_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float feature = 1;
  if (this->feature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->feature_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Feature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _feature_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::google::protobuf::DynamicCastToGenerated<Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kGroupFieldNumber;
const int UserInfo::kIdFieldNumber;
const int UserInfo::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserInfo_search_2eproto.base);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:pb.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserInfo_search_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.UserInfo.group");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_group();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.UserInfo.id");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_id();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float feature = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_feature();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        do {
          float val;
          std::memcpy(&val, ptr, 4);
          ptr += 4;
          msg->add_feature(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserInfo.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated float feature = 3;
  if (this->feature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->feature().data(), this->feature_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated float feature = 3;
  if (this->feature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->feature_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _feature_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NomalReply::InitAsDefaultInstance() {
}
class NomalReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NomalReply::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NomalReply::NomalReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.NomalReply)
}
NomalReply::NomalReply(const NomalReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:pb.NomalReply)
}

void NomalReply::SharedCtor() {
  ret_ = false;
}

NomalReply::~NomalReply() {
  // @@protoc_insertion_point(destructor:pb.NomalReply)
  SharedDtor();
}

void NomalReply::SharedDtor() {
}

void NomalReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NomalReply& NomalReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NomalReply_search_2eproto.base);
  return *internal_default_instance();
}


void NomalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.NomalReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NomalReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NomalReply*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool ret = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_ret(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NomalReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.NomalReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.NomalReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.NomalReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NomalReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.NomalReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.NomalReply)
}

::google::protobuf::uint8* NomalReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.NomalReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NomalReply)
  return target;
}

size_t NomalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.NomalReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->ret() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NomalReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.NomalReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NomalReply* source =
      ::google::protobuf::DynamicCastToGenerated<NomalReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.NomalReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.NomalReply)
    MergeFrom(*source);
  }
}

void NomalReply::MergeFrom(const NomalReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.NomalReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void NomalReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.NomalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NomalReply::CopyFrom(const NomalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.NomalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NomalReply::IsInitialized() const {
  return true;
}

void NomalReply::Swap(NomalReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NomalReply::InternalSwap(NomalReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::google::protobuf::Metadata NomalReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StringsReply::InitAsDefaultInstance() {
}
class StringsReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringsReply::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringsReply::StringsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StringsReply)
}
StringsReply::StringsReply(const StringsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.StringsReply)
}

void StringsReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StringsReply_search_2eproto.base);
}

StringsReply::~StringsReply() {
  // @@protoc_insertion_point(destructor:pb.StringsReply)
  SharedDtor();
}

void StringsReply::SharedDtor() {
}

void StringsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringsReply& StringsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StringsReply_search_2eproto.base);
  return *internal_default_instance();
}


void StringsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.StringsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringsReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StringsReply*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.StringsReply.values");
          parser_till_end = ::google::protobuf::internal::StringParserUTF8;
          ::std::string* str = msg->add_values();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StringsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.StringsReply.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StringsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StringsReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StringsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.StringsReply.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StringsReply)
}

::google::protobuf::uint8* StringsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.StringsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.StringsReply.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StringsReply)
  return target;
}

size_t StringsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.StringsReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.StringsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StringsReply* source =
      ::google::protobuf::DynamicCastToGenerated<StringsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.StringsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.StringsReply)
    MergeFrom(*source);
  }
}

void StringsReply::MergeFrom(const StringsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.StringsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void StringsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.StringsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringsReply::CopyFrom(const StringsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.StringsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringsReply::IsInitialized() const {
  return true;
}

void StringsReply::Swap(StringsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringsReply::InternalSwap(StringsReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(CastToBase(&other->values_));
}

::google::protobuf::Metadata StringsReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Group::InitAsDefaultInstance() {
}
class Group::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.Group)
}

void Group::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Group_search_2eproto.base);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:pb.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Group& Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Group_search_2eproto.base);
  return *internal_default_instance();
}


void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Group::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Group*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Group.group");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_group();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Group.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Group)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Group.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Group.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Group)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::google::protobuf::DynamicCastToGenerated<Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Group::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserListReq::InitAsDefaultInstance() {
}
class UserListReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserListReq::kGroupFieldNumber;
const int UserListReq::kSkeyFieldNumber;
const int UserListReq::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserListReq::UserListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserListReq)
}
UserListReq::UserListReq(const UserListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skey().size() > 0) {
    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:pb.UserListReq)
}

void UserListReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserListReq_search_2eproto.base);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
}

UserListReq::~UserListReq() {
  // @@protoc_insertion_point(destructor:pb.UserListReq)
  SharedDtor();
}

void UserListReq::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserListReq& UserListReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserListReq_search_2eproto.base);
  return *internal_default_instance();
}


void UserListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UserListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserListReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserListReq*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.UserListReq.group");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_group();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string skey = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.UserListReq.skey");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_skey();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // int32 num = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_num(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserListReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserListReq.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skey().data(), static_cast<int>(this->skey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserListReq.skey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserListReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserListReq.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // string skey = 2;
  if (this->skey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skey().data(), static_cast<int>(this->skey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserListReq.skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->skey(), output);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.UserListReq)
}

::google::protobuf::uint8* UserListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserListReq.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // string skey = 2;
  if (this->skey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skey().data(), static_cast<int>(this->skey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserListReq.skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->skey(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UserListReq)
  return target;
}

size_t UserListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UserListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // string skey = 2;
  if (this->skey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skey());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UserListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UserListReq* source =
      ::google::protobuf::DynamicCastToGenerated<UserListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UserListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UserListReq)
    MergeFrom(*source);
  }
}

void UserListReq::MergeFrom(const UserListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UserListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.skey().size() > 0) {

    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void UserListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UserListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListReq::CopyFrom(const UserListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UserListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListReq::IsInitialized() const {
  return true;
}

void UserListReq::Swap(UserListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserListReq::InternalSwap(UserListReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skey_.Swap(&other->skey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
}

::google::protobuf::Metadata UserListReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchRequest::InitAsDefaultInstance() {
}
class SearchRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kGroupFieldNumber;
const int SearchRequest::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchRequest_search_2eproto.base);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:pb.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequest& SearchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchRequest_search_2eproto.base);
  return *internal_default_instance();
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.SearchRequest.group");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_group();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated float feature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_feature();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        do {
          float val;
          std::memcpy(&val, ptr, 4);
          ptr += 4;
          msg->add_feature(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 21 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SearchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SearchRequest.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SearchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // repeated float feature = 2;
  if (this->feature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->feature().data(), this->feature_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SearchRequest.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // repeated float feature = 2;
  if (this->feature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->feature_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _feature_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchReply_User::InitAsDefaultInstance() {
}
class SearchReply_User::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReply_User::kNameFieldNumber;
const int SearchReply_User::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReply_User::SearchReply_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SearchReply.User)
}
SearchReply_User::SearchReply_User(const SearchReply_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:pb.SearchReply.User)
}

void SearchReply_User::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchReply_User_search_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

SearchReply_User::~SearchReply_User() {
  // @@protoc_insertion_point(destructor:pb.SearchReply.User)
  SharedDtor();
}

void SearchReply_User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchReply_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchReply_User& SearchReply_User::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchReply_User_search_2eproto.base);
  return *internal_default_instance();
}


void SearchReply_User::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchReply.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchReply_User::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchReply_User*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.SearchReply.User.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // float distance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_distance(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchReply_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SearchReply.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SearchReply.User.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SearchReply.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SearchReply.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchReply_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SearchReply.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SearchReply.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SearchReply.User)
}

::google::protobuf::uint8* SearchReply_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchReply.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SearchReply.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchReply.User)
  return target;
}

size_t SearchReply_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchReply.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchReply_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchReply.User)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReply_User* source =
      ::google::protobuf::DynamicCastToGenerated<SearchReply_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchReply.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchReply.User)
    MergeFrom(*source);
  }
}

void SearchReply_User::MergeFrom(const SearchReply_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchReply.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void SearchReply_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchReply.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReply_User::CopyFrom(const SearchReply_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchReply.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply_User::IsInitialized() const {
  return true;
}

void SearchReply_User::Swap(SearchReply_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchReply_User::InternalSwap(SearchReply_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata SearchReply_User::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchReply::InitAsDefaultInstance() {
}
class SearchReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReply::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReply::SearchReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SearchReply)
}
SearchReply::SearchReply(const SearchReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SearchReply)
}

void SearchReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchReply_search_2eproto.base);
}

SearchReply::~SearchReply() {
  // @@protoc_insertion_point(destructor:pb.SearchReply)
  SharedDtor();
}

void SearchReply::SharedDtor() {
}

void SearchReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchReply& SearchReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchReply_search_2eproto.base);
  return *internal_default_instance();
}


void SearchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchReply*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.SearchReply.User users = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::SearchReply_User::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SearchReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SearchReply.User users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SearchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SearchReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SearchReply.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SearchReply)
}

::google::protobuf::uint8* SearchReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SearchReply.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SearchReply)
  return target;
}

size_t SearchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SearchReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SearchReply.User users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SearchReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReply* source =
      ::google::protobuf::DynamicCastToGenerated<SearchReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SearchReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SearchReply)
    MergeFrom(*source);
  }
}

void SearchReply::MergeFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SearchReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void SearchReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReply::CopyFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply::IsInitialized() const {
  return true;
}

void SearchReply::Swap(SearchReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchReply::InternalSwap(SearchReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

::google::protobuf::Metadata SearchReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoReply_GroupInfo::InitAsDefaultInstance() {
}
class InfoReply_GroupInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoReply_GroupInfo::kNameFieldNumber;
const int InfoReply_GroupInfo::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoReply_GroupInfo::InfoReply_GroupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InfoReply.GroupInfo)
}
InfoReply_GroupInfo::InfoReply_GroupInfo(const InfoReply_GroupInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:pb.InfoReply.GroupInfo)
}

void InfoReply_GroupInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoReply_GroupInfo_search_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

InfoReply_GroupInfo::~InfoReply_GroupInfo() {
  // @@protoc_insertion_point(destructor:pb.InfoReply.GroupInfo)
  SharedDtor();
}

void InfoReply_GroupInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoReply_GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReply_GroupInfo& InfoReply_GroupInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoReply_GroupInfo_search_2eproto.base);
  return *internal_default_instance();
}


void InfoReply_GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InfoReply.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoReply_GroupInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoReply_GroupInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.InfoReply.GroupInfo.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // int32 len = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_len(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoReply_GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InfoReply.GroupInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.InfoReply.GroupInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InfoReply.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InfoReply.GroupInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoReply_GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InfoReply.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InfoReply.GroupInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 len = 2;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InfoReply.GroupInfo)
}

::google::protobuf::uint8* InfoReply_GroupInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.InfoReply.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.InfoReply.GroupInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 len = 2;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InfoReply.GroupInfo)
  return target;
}

size_t InfoReply_GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InfoReply.GroupInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReply_GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InfoReply.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReply_GroupInfo* source =
      ::google::protobuf::DynamicCastToGenerated<InfoReply_GroupInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InfoReply.GroupInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InfoReply.GroupInfo)
    MergeFrom(*source);
  }
}

void InfoReply_GroupInfo::MergeFrom(const InfoReply_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InfoReply.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
}

void InfoReply_GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InfoReply.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReply_GroupInfo::CopyFrom(const InfoReply_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InfoReply.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReply_GroupInfo::IsInitialized() const {
  return true;
}

void InfoReply_GroupInfo::Swap(InfoReply_GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoReply_GroupInfo::InternalSwap(InfoReply_GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(len_, other->len_);
}

::google::protobuf::Metadata InfoReply_GroupInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoReply::InitAsDefaultInstance() {
}
class InfoReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoReply::kGroupsLenFieldNumber;
const int InfoReply::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoReply::InfoReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InfoReply)
}
InfoReply::InfoReply(const InfoReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupslen_ = from.groupslen_;
  // @@protoc_insertion_point(copy_constructor:pb.InfoReply)
}

void InfoReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoReply_search_2eproto.base);
  groupslen_ = 0;
}

InfoReply::~InfoReply() {
  // @@protoc_insertion_point(destructor:pb.InfoReply)
  SharedDtor();
}

void InfoReply::SharedDtor() {
}

void InfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReply& InfoReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoReply_search_2eproto.base);
  return *internal_default_instance();
}


void InfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  groupslen_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoReply*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 GroupsLen = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_groupslen(value);
        break;
      }
      // repeated .pb.InfoReply.GroupInfo groups = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::InfoReply_GroupInfo::_InternalParse;
          object = msg->add_groups();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InfoReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 GroupsLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupslen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.InfoReply.GroupInfo groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InfoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InfoReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GroupsLen = 1;
  if (this->groupslen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupslen(), output);
  }

  // repeated .pb.InfoReply.GroupInfo groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InfoReply)
}

::google::protobuf::uint8* InfoReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.InfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GroupsLen = 1;
  if (this->groupslen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupslen(), target);
  }

  // repeated .pb.InfoReply.GroupInfo groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InfoReply)
  return target;
}

size_t InfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InfoReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.InfoReply.GroupInfo groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  // int32 GroupsLen = 1;
  if (this->groupslen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupslen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReply* source =
      ::google::protobuf::DynamicCastToGenerated<InfoReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InfoReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InfoReply)
    MergeFrom(*source);
  }
}

void InfoReply::MergeFrom(const InfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.groupslen() != 0) {
    set_groupslen(from.groupslen());
  }
}

void InfoReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReply::CopyFrom(const InfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReply::IsInitialized() const {
  return true;
}

void InfoReply::Swap(InfoReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoReply::InternalSwap(InfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  swap(groupslen_, other->groupslen_);
}

::google::protobuf::Metadata InfoReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_search_2eproto);
  return ::file_level_metadata_search_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::SizeReply* Arena::CreateMaybeMessage< ::pb::SizeReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SizeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Null* Arena::CreateMaybeMessage< ::pb::Null >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Null >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Feature* Arena::CreateMaybeMessage< ::pb::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::UserInfo* Arena::CreateMaybeMessage< ::pb::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::NomalReply* Arena::CreateMaybeMessage< ::pb::NomalReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::NomalReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::StringsReply* Arena::CreateMaybeMessage< ::pb::StringsReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::StringsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Group* Arena::CreateMaybeMessage< ::pb::Group >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Group >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::UserListReq* Arena::CreateMaybeMessage< ::pb::UserListReq >(Arena* arena) {
  return Arena::CreateInternal< ::pb::UserListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SearchRequest* Arena::CreateMaybeMessage< ::pb::SearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SearchReply_User* Arena::CreateMaybeMessage< ::pb::SearchReply_User >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SearchReply_User >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SearchReply* Arena::CreateMaybeMessage< ::pb::SearchReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SearchReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InfoReply_GroupInfo* Arena::CreateMaybeMessage< ::pb::InfoReply_GroupInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InfoReply_GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InfoReply* Arena::CreateMaybeMessage< ::pb::InfoReply >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InfoReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
