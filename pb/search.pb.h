// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_INCLUDED_search_2eproto
#define PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_search_2eproto();
namespace pb {
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class InfoReply;
class InfoReplyDefaultTypeInternal;
extern InfoReplyDefaultTypeInternal _InfoReply_default_instance_;
class InfoReply_GroupInfo;
class InfoReply_GroupInfoDefaultTypeInternal;
extern InfoReply_GroupInfoDefaultTypeInternal _InfoReply_GroupInfo_default_instance_;
class NomalReply;
class NomalReplyDefaultTypeInternal;
extern NomalReplyDefaultTypeInternal _NomalReply_default_instance_;
class Null;
class NullDefaultTypeInternal;
extern NullDefaultTypeInternal _Null_default_instance_;
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchReply_User;
class SearchReply_UserDefaultTypeInternal;
extern SearchReply_UserDefaultTypeInternal _SearchReply_User_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SizeReply;
class SizeReplyDefaultTypeInternal;
extern SizeReplyDefaultTypeInternal _SizeReply_default_instance_;
class StringsReply;
class StringsReplyDefaultTypeInternal;
extern StringsReplyDefaultTypeInternal _StringsReply_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserListReq;
class UserListReqDefaultTypeInternal;
extern UserListReqDefaultTypeInternal _UserListReq_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Feature* Arena::CreateMaybeMessage<::pb::Feature>(Arena*);
template<> ::pb::Group* Arena::CreateMaybeMessage<::pb::Group>(Arena*);
template<> ::pb::InfoReply* Arena::CreateMaybeMessage<::pb::InfoReply>(Arena*);
template<> ::pb::InfoReply_GroupInfo* Arena::CreateMaybeMessage<::pb::InfoReply_GroupInfo>(Arena*);
template<> ::pb::NomalReply* Arena::CreateMaybeMessage<::pb::NomalReply>(Arena*);
template<> ::pb::Null* Arena::CreateMaybeMessage<::pb::Null>(Arena*);
template<> ::pb::SearchReply* Arena::CreateMaybeMessage<::pb::SearchReply>(Arena*);
template<> ::pb::SearchReply_User* Arena::CreateMaybeMessage<::pb::SearchReply_User>(Arena*);
template<> ::pb::SearchRequest* Arena::CreateMaybeMessage<::pb::SearchRequest>(Arena*);
template<> ::pb::SizeReply* Arena::CreateMaybeMessage<::pb::SizeReply>(Arena*);
template<> ::pb::StringsReply* Arena::CreateMaybeMessage<::pb::StringsReply>(Arena*);
template<> ::pb::UserInfo* Arena::CreateMaybeMessage<::pb::UserInfo>(Arena*);
template<> ::pb::UserListReq* Arena::CreateMaybeMessage<::pb::UserListReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class SizeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SizeReply) */ {
 public:
  SizeReply();
  virtual ~SizeReply();

  SizeReply(const SizeReply& from);

  inline SizeReply& operator=(const SizeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SizeReply(SizeReply&& from) noexcept
    : SizeReply() {
    *this = ::std::move(from);
  }

  inline SizeReply& operator=(SizeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SizeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SizeReply* internal_default_instance() {
    return reinterpret_cast<const SizeReply*>(
               &_SizeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SizeReply* other);
  friend void swap(SizeReply& a, SizeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SizeReply* New() const final {
    return CreateMaybeMessage<SizeReply>(NULL);
  }

  SizeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SizeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SizeReply& from);
  void MergeFrom(const SizeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SizeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SizeReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Null : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Null) */ {
 public:
  Null();
  virtual ~Null();

  Null(const Null& from);

  inline Null& operator=(const Null& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Null(Null&& from) noexcept
    : Null() {
    *this = ::std::move(from);
  }

  inline Null& operator=(Null&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Null& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Null* internal_default_instance() {
    return reinterpret_cast<const Null*>(
               &_Null_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Null* other);
  friend void swap(Null& a, Null& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Null* New() const final {
    return CreateMaybeMessage<Null>(NULL);
  }

  Null* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Null>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Null& from);
  void MergeFrom(const Null& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Null* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.Null)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(NULL);
  }

  Feature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature = 1;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 1;
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature();

  // @@protoc_insertion_point(class_scope:pb.Feature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > feature_;
  mutable std::atomic<int> _feature_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature = 3;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 3;
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature();

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:pb.UserInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > feature_;
  mutable std::atomic<int> _feature_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class NomalReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.NomalReply) */ {
 public:
  NomalReply();
  virtual ~NomalReply();

  NomalReply(const NomalReply& from);

  inline NomalReply& operator=(const NomalReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NomalReply(NomalReply&& from) noexcept
    : NomalReply() {
    *this = ::std::move(from);
  }

  inline NomalReply& operator=(NomalReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NomalReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NomalReply* internal_default_instance() {
    return reinterpret_cast<const NomalReply*>(
               &_NomalReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NomalReply* other);
  friend void swap(NomalReply& a, NomalReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NomalReply* New() const final {
    return CreateMaybeMessage<NomalReply>(NULL);
  }

  NomalReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NomalReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NomalReply& from);
  void MergeFrom(const NomalReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NomalReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:pb.NomalReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class StringsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.StringsReply) */ {
 public:
  StringsReply();
  virtual ~StringsReply();

  StringsReply(const StringsReply& from);

  inline StringsReply& operator=(const StringsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringsReply(StringsReply&& from) noexcept
    : StringsReply() {
    *this = ::std::move(from);
  }

  inline StringsReply& operator=(StringsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StringsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringsReply* internal_default_instance() {
    return reinterpret_cast<const StringsReply*>(
               &_StringsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StringsReply* other);
  friend void swap(StringsReply& a, StringsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringsReply* New() const final {
    return CreateMaybeMessage<StringsReply>(NULL);
  }

  StringsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringsReply& from);
  void MergeFrom(const StringsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:pb.StringsReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Group* other);
  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(NULL);
  }

  Group* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // @@protoc_insertion_point(class_scope:pb.Group)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class UserListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UserListReq) */ {
 public:
  UserListReq();
  virtual ~UserListReq();

  UserListReq(const UserListReq& from);

  inline UserListReq& operator=(const UserListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserListReq(UserListReq&& from) noexcept
    : UserListReq() {
    *this = ::std::move(from);
  }

  inline UserListReq& operator=(UserListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserListReq* internal_default_instance() {
    return reinterpret_cast<const UserListReq*>(
               &_UserListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UserListReq* other);
  friend void swap(UserListReq& a, UserListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserListReq* New() const final {
    return CreateMaybeMessage<UserListReq>(NULL);
  }

  UserListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserListReq& from);
  void MergeFrom(const UserListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // string skey = 2;
  void clear_skey();
  static const int kSkeyFieldNumber = 2;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // int32 num = 3;
  void clear_num();
  static const int kNumFieldNumber = 3;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.UserListReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature = 2;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature();

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // @@protoc_insertion_point(class_scope:pb.SearchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > feature_;
  mutable std::atomic<int> _feature_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchReply_User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchReply.User) */ {
 public:
  SearchReply_User();
  virtual ~SearchReply_User();

  SearchReply_User(const SearchReply_User& from);

  inline SearchReply_User& operator=(const SearchReply_User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply_User(SearchReply_User&& from) noexcept
    : SearchReply_User() {
    *this = ::std::move(from);
  }

  inline SearchReply_User& operator=(SearchReply_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchReply_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply_User* internal_default_instance() {
    return reinterpret_cast<const SearchReply_User*>(
               &_SearchReply_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SearchReply_User* other);
  friend void swap(SearchReply_User& a, SearchReply_User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply_User* New() const final {
    return CreateMaybeMessage<SearchReply_User>(NULL);
  }

  SearchReply_User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply_User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchReply_User& from);
  void MergeFrom(const SearchReply_User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply_User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:pb.SearchReply.User)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SearchReply* other);
  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const final {
    return CreateMaybeMessage<SearchReply>(NULL);
  }

  SearchReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchReply_User User;

  // accessors -------------------------------------------------------

  // repeated .pb.SearchReply.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::pb::SearchReply_User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >*
      mutable_users();
  const ::pb::SearchReply_User& users(int index) const;
  ::pb::SearchReply_User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >&
      users() const;

  // @@protoc_insertion_point(class_scope:pb.SearchReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class InfoReply_GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InfoReply.GroupInfo) */ {
 public:
  InfoReply_GroupInfo();
  virtual ~InfoReply_GroupInfo();

  InfoReply_GroupInfo(const InfoReply_GroupInfo& from);

  inline InfoReply_GroupInfo& operator=(const InfoReply_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoReply_GroupInfo(InfoReply_GroupInfo&& from) noexcept
    : InfoReply_GroupInfo() {
    *this = ::std::move(from);
  }

  inline InfoReply_GroupInfo& operator=(InfoReply_GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InfoReply_GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoReply_GroupInfo* internal_default_instance() {
    return reinterpret_cast<const InfoReply_GroupInfo*>(
               &_InfoReply_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(InfoReply_GroupInfo* other);
  friend void swap(InfoReply_GroupInfo& a, InfoReply_GroupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoReply_GroupInfo* New() const final {
    return CreateMaybeMessage<InfoReply_GroupInfo>(NULL);
  }

  InfoReply_GroupInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoReply_GroupInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoReply_GroupInfo& from);
  void MergeFrom(const InfoReply_GroupInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoReply_GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 len = 2;
  void clear_len();
  static const int kLenFieldNumber = 2;
  ::google::protobuf::int32 len() const;
  void set_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.InfoReply.GroupInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class InfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InfoReply) */ {
 public:
  InfoReply();
  virtual ~InfoReply();

  InfoReply(const InfoReply& from);

  inline InfoReply& operator=(const InfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoReply(InfoReply&& from) noexcept
    : InfoReply() {
    *this = ::std::move(from);
  }

  inline InfoReply& operator=(InfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoReply* internal_default_instance() {
    return reinterpret_cast<const InfoReply*>(
               &_InfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(InfoReply* other);
  friend void swap(InfoReply& a, InfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoReply* New() const final {
    return CreateMaybeMessage<InfoReply>(NULL);
  }

  InfoReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoReply& from);
  void MergeFrom(const InfoReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InfoReply_GroupInfo GroupInfo;

  // accessors -------------------------------------------------------

  // repeated .pb.InfoReply.GroupInfo groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  ::pb::InfoReply_GroupInfo* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::InfoReply_GroupInfo >*
      mutable_groups();
  const ::pb::InfoReply_GroupInfo& groups(int index) const;
  ::pb::InfoReply_GroupInfo* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::pb::InfoReply_GroupInfo >&
      groups() const;

  // int32 GroupsLen = 1;
  void clear_groupslen();
  static const int kGroupsLenFieldNumber = 1;
  ::google::protobuf::int32 groupslen() const;
  void set_groupslen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.InfoReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::InfoReply_GroupInfo > groups_;
  ::google::protobuf::int32 groupslen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SizeReply

// uint64 size = 1;
inline void SizeReply::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SizeReply::size() const {
  // @@protoc_insertion_point(field_get:pb.SizeReply.size)
  return size_;
}
inline void SizeReply::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:pb.SizeReply.size)
}

// -------------------------------------------------------------------

// Null

// -------------------------------------------------------------------

// Feature

// repeated float feature = 1;
inline int Feature::feature_size() const {
  return feature_.size();
}
inline void Feature::clear_feature() {
  feature_.Clear();
}
inline float Feature::feature(int index) const {
  // @@protoc_insertion_point(field_get:pb.Feature.feature)
  return feature_.Get(index);
}
inline void Feature::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Feature.feature)
}
inline void Feature::add_feature(float value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:pb.Feature.feature)
}
inline const ::google::protobuf::RepeatedField< float >&
Feature::feature() const {
  // @@protoc_insertion_point(field_list:pb.Feature.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedField< float >*
Feature::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:pb.Feature.feature)
  return &feature_;
}

// -------------------------------------------------------------------

// UserInfo

// string group = 1;
inline void UserInfo::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::group() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.group)
  return group_.GetNoArena();
}
inline void UserInfo::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.group)
}
#if LANG_CXX11
inline void UserInfo::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UserInfo.group)
}
#endif
inline void UserInfo::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.group)
}
inline void UserInfo::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.group)
}
inline ::std::string* UserInfo::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_group() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.group)
}

// string id = 2;
inline void UserInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.id)
  return id_.GetNoArena();
}
inline void UserInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.id)
}
#if LANG_CXX11
inline void UserInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UserInfo.id)
}
#endif
inline void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.id)
}
inline void UserInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.id)
}
inline ::std::string* UserInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.id)
}

// repeated float feature = 3;
inline int UserInfo::feature_size() const {
  return feature_.size();
}
inline void UserInfo::clear_feature() {
  feature_.Clear();
}
inline float UserInfo::feature(int index) const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.feature)
  return feature_.Get(index);
}
inline void UserInfo::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.feature)
}
inline void UserInfo::add_feature(float value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:pb.UserInfo.feature)
}
inline const ::google::protobuf::RepeatedField< float >&
UserInfo::feature() const {
  // @@protoc_insertion_point(field_list:pb.UserInfo.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedField< float >*
UserInfo::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:pb.UserInfo.feature)
  return &feature_;
}

// -------------------------------------------------------------------

// NomalReply

// bool ret = 1;
inline void NomalReply::clear_ret() {
  ret_ = false;
}
inline bool NomalReply::ret() const {
  // @@protoc_insertion_point(field_get:pb.NomalReply.ret)
  return ret_;
}
inline void NomalReply::set_ret(bool value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:pb.NomalReply.ret)
}

// -------------------------------------------------------------------

// StringsReply

// repeated string values = 1;
inline int StringsReply::values_size() const {
  return values_.size();
}
inline void StringsReply::clear_values() {
  values_.Clear();
}
inline const ::std::string& StringsReply::values(int index) const {
  // @@protoc_insertion_point(field_get:pb.StringsReply.values)
  return values_.Get(index);
}
inline ::std::string* StringsReply::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:pb.StringsReply.values)
  return values_.Mutable(index);
}
inline void StringsReply::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.StringsReply.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringsReply::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.StringsReply.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringsReply::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.StringsReply.values)
}
inline void StringsReply::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.StringsReply.values)
}
inline ::std::string* StringsReply::add_values() {
  // @@protoc_insertion_point(field_add_mutable:pb.StringsReply.values)
  return values_.Add();
}
inline void StringsReply::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.StringsReply.values)
}
#if LANG_CXX11
inline void StringsReply::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.StringsReply.values)
}
#endif
inline void StringsReply::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.StringsReply.values)
}
inline void StringsReply::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.StringsReply.values)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StringsReply::values() const {
  // @@protoc_insertion_point(field_list:pb.StringsReply.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StringsReply::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:pb.StringsReply.values)
  return &values_;
}

// -------------------------------------------------------------------

// Group

// string group = 1;
inline void Group::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::group() const {
  // @@protoc_insertion_point(field_get:pb.Group.group)
  return group_.GetNoArena();
}
inline void Group::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Group.group)
}
#if LANG_CXX11
inline void Group::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Group.group)
}
#endif
inline void Group::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Group.group)
}
inline void Group::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Group.group)
}
inline ::std::string* Group::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Group.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_group() {
  // @@protoc_insertion_point(field_release:pb.Group.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Group.group)
}

// -------------------------------------------------------------------

// UserListReq

// string group = 1;
inline void UserListReq::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserListReq::group() const {
  // @@protoc_insertion_point(field_get:pb.UserListReq.group)
  return group_.GetNoArena();
}
inline void UserListReq::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserListReq.group)
}
#if LANG_CXX11
inline void UserListReq::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UserListReq.group)
}
#endif
inline void UserListReq::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserListReq.group)
}
inline void UserListReq::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserListReq.group)
}
inline ::std::string* UserListReq::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserListReq.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserListReq::release_group() {
  // @@protoc_insertion_point(field_release:pb.UserListReq.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserListReq::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.UserListReq.group)
}

// string skey = 2;
inline void UserListReq::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserListReq::skey() const {
  // @@protoc_insertion_point(field_get:pb.UserListReq.skey)
  return skey_.GetNoArena();
}
inline void UserListReq::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserListReq.skey)
}
#if LANG_CXX11
inline void UserListReq::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UserListReq.skey)
}
#endif
inline void UserListReq::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserListReq.skey)
}
inline void UserListReq::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserListReq.skey)
}
inline ::std::string* UserListReq::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserListReq.skey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserListReq::release_skey() {
  // @@protoc_insertion_point(field_release:pb.UserListReq.skey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserListReq::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:pb.UserListReq.skey)
}

// int32 num = 3;
inline void UserListReq::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 UserListReq::num() const {
  // @@protoc_insertion_point(field_get:pb.UserListReq.num)
  return num_;
}
inline void UserListReq::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.UserListReq.num)
}

// -------------------------------------------------------------------

// SearchRequest

// string group = 1;
inline void SearchRequest::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::group() const {
  // @@protoc_insertion_point(field_get:pb.SearchRequest.group)
  return group_.GetNoArena();
}
inline void SearchRequest::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SearchRequest.group)
}
#if LANG_CXX11
inline void SearchRequest::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SearchRequest.group)
}
#endif
inline void SearchRequest::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SearchRequest.group)
}
inline void SearchRequest::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SearchRequest.group)
}
inline ::std::string* SearchRequest::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.SearchRequest.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_group() {
  // @@protoc_insertion_point(field_release:pb.SearchRequest.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.SearchRequest.group)
}

// repeated float feature = 2;
inline int SearchRequest::feature_size() const {
  return feature_.size();
}
inline void SearchRequest::clear_feature() {
  feature_.Clear();
}
inline float SearchRequest::feature(int index) const {
  // @@protoc_insertion_point(field_get:pb.SearchRequest.feature)
  return feature_.Get(index);
}
inline void SearchRequest::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SearchRequest.feature)
}
inline void SearchRequest::add_feature(float value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SearchRequest.feature)
}
inline const ::google::protobuf::RepeatedField< float >&
SearchRequest::feature() const {
  // @@protoc_insertion_point(field_list:pb.SearchRequest.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedField< float >*
SearchRequest::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:pb.SearchRequest.feature)
  return &feature_;
}

// -------------------------------------------------------------------

// SearchReply_User

// string name = 1;
inline void SearchReply_User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchReply_User::name() const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.User.name)
  return name_.GetNoArena();
}
inline void SearchReply_User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SearchReply.User.name)
}
#if LANG_CXX11
inline void SearchReply_User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SearchReply.User.name)
}
#endif
inline void SearchReply_User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SearchReply.User.name)
}
inline void SearchReply_User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SearchReply.User.name)
}
inline ::std::string* SearchReply_User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.SearchReply.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchReply_User::release_name() {
  // @@protoc_insertion_point(field_release:pb.SearchReply.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply_User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SearchReply.User.name)
}

// float distance = 2;
inline void SearchReply_User::clear_distance() {
  distance_ = 0;
}
inline float SearchReply_User::distance() const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.User.distance)
  return distance_;
}
inline void SearchReply_User::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchReply.User.distance)
}

// -------------------------------------------------------------------

// SearchReply

// repeated .pb.SearchReply.User users = 1;
inline int SearchReply::users_size() const {
  return users_.size();
}
inline void SearchReply::clear_users() {
  users_.Clear();
}
inline ::pb::SearchReply_User* SearchReply::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SearchReply.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >*
SearchReply::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:pb.SearchReply.users)
  return &users_;
}
inline const ::pb::SearchReply_User& SearchReply::users(int index) const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.users)
  return users_.Get(index);
}
inline ::pb::SearchReply_User* SearchReply::add_users() {
  // @@protoc_insertion_point(field_add:pb.SearchReply.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >&
SearchReply::users() const {
  // @@protoc_insertion_point(field_list:pb.SearchReply.users)
  return users_;
}

// -------------------------------------------------------------------

// InfoReply_GroupInfo

// string name = 1;
inline void InfoReply_GroupInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoReply_GroupInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.InfoReply.GroupInfo.name)
  return name_.GetNoArena();
}
inline void InfoReply_GroupInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InfoReply.GroupInfo.name)
}
#if LANG_CXX11
inline void InfoReply_GroupInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InfoReply.GroupInfo.name)
}
#endif
inline void InfoReply_GroupInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InfoReply.GroupInfo.name)
}
inline void InfoReply_GroupInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InfoReply.GroupInfo.name)
}
inline ::std::string* InfoReply_GroupInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.InfoReply.GroupInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoReply_GroupInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.InfoReply.GroupInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoReply_GroupInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.InfoReply.GroupInfo.name)
}

// int32 len = 2;
inline void InfoReply_GroupInfo::clear_len() {
  len_ = 0;
}
inline ::google::protobuf::int32 InfoReply_GroupInfo::len() const {
  // @@protoc_insertion_point(field_get:pb.InfoReply.GroupInfo.len)
  return len_;
}
inline void InfoReply_GroupInfo::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:pb.InfoReply.GroupInfo.len)
}

// -------------------------------------------------------------------

// InfoReply

// int32 GroupsLen = 1;
inline void InfoReply::clear_groupslen() {
  groupslen_ = 0;
}
inline ::google::protobuf::int32 InfoReply::groupslen() const {
  // @@protoc_insertion_point(field_get:pb.InfoReply.GroupsLen)
  return groupslen_;
}
inline void InfoReply::set_groupslen(::google::protobuf::int32 value) {
  
  groupslen_ = value;
  // @@protoc_insertion_point(field_set:pb.InfoReply.GroupsLen)
}

// repeated .pb.InfoReply.GroupInfo groups = 2;
inline int InfoReply::groups_size() const {
  return groups_.size();
}
inline void InfoReply::clear_groups() {
  groups_.Clear();
}
inline ::pb::InfoReply_GroupInfo* InfoReply::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InfoReply.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InfoReply_GroupInfo >*
InfoReply::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:pb.InfoReply.groups)
  return &groups_;
}
inline const ::pb::InfoReply_GroupInfo& InfoReply::groups(int index) const {
  // @@protoc_insertion_point(field_get:pb.InfoReply.groups)
  return groups_.Get(index);
}
inline ::pb::InfoReply_GroupInfo* InfoReply::add_groups() {
  // @@protoc_insertion_point(field_add:pb.InfoReply.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InfoReply_GroupInfo >&
InfoReply::groups() const {
  // @@protoc_insertion_point(field_list:pb.InfoReply.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_search_2eproto
