// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_INCLUDED_search_2eproto
#define PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_search_2eproto();
namespace pb {
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchReply_User;
class SearchReply_UserDefaultTypeInternal;
extern SearchReply_UserDefaultTypeInternal _SearchReply_User_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::SearchReply* Arena::CreateMaybeMessage<::pb::SearchReply>(Arena*);
template<> ::pb::SearchReply_User* Arena::CreateMaybeMessage<::pb::SearchReply_User>(Arena*);
template<> ::pb::SearchRequest* Arena::CreateMaybeMessage<::pb::SearchRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  float name(int index) const;
  void set_name(int index, float value);
  void add_name(float value);
  const ::google::protobuf::RepeatedField< float >&
      name() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_name();

  // @@protoc_insertion_point(class_scope:pb.SearchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > name_;
  mutable std::atomic<int> _name_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchReply_User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchReply.User) */ {
 public:
  SearchReply_User();
  virtual ~SearchReply_User();

  SearchReply_User(const SearchReply_User& from);

  inline SearchReply_User& operator=(const SearchReply_User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply_User(SearchReply_User&& from) noexcept
    : SearchReply_User() {
    *this = ::std::move(from);
  }

  inline SearchReply_User& operator=(SearchReply_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchReply_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply_User* internal_default_instance() {
    return reinterpret_cast<const SearchReply_User*>(
               &_SearchReply_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SearchReply_User* other);
  friend void swap(SearchReply_User& a, SearchReply_User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply_User* New() const final {
    return CreateMaybeMessage<SearchReply_User>(NULL);
  }

  SearchReply_User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply_User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchReply_User& from);
  void MergeFrom(const SearchReply_User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply_User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:pb.SearchReply.User)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchReply* other);
  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const final {
    return CreateMaybeMessage<SearchReply>(NULL);
  }

  SearchReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchReply_User User;

  // accessors -------------------------------------------------------

  // repeated .pb.SearchReply.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::pb::SearchReply_User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >*
      mutable_users();
  const ::pb::SearchReply_User& users(int index) const;
  ::pb::SearchReply_User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >&
      users() const;

  // @@protoc_insertion_point(class_scope:pb.SearchReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// repeated float name = 1;
inline int SearchRequest::name_size() const {
  return name_.size();
}
inline void SearchRequest::clear_name() {
  name_.Clear();
}
inline float SearchRequest::name(int index) const {
  // @@protoc_insertion_point(field_get:pb.SearchRequest.name)
  return name_.Get(index);
}
inline void SearchRequest::set_name(int index, float value) {
  name_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SearchRequest.name)
}
inline void SearchRequest::add_name(float value) {
  name_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SearchRequest.name)
}
inline const ::google::protobuf::RepeatedField< float >&
SearchRequest::name() const {
  // @@protoc_insertion_point(field_list:pb.SearchRequest.name)
  return name_;
}
inline ::google::protobuf::RepeatedField< float >*
SearchRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:pb.SearchRequest.name)
  return &name_;
}

// -------------------------------------------------------------------

// SearchReply_User

// string name = 1;
inline void SearchReply_User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchReply_User::name() const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.User.name)
  return name_.GetNoArena();
}
inline void SearchReply_User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SearchReply.User.name)
}
#if LANG_CXX11
inline void SearchReply_User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SearchReply.User.name)
}
#endif
inline void SearchReply_User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SearchReply.User.name)
}
inline void SearchReply_User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SearchReply.User.name)
}
inline ::std::string* SearchReply_User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.SearchReply.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchReply_User::release_name() {
  // @@protoc_insertion_point(field_release:pb.SearchReply.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply_User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SearchReply.User.name)
}

// float distance = 2;
inline void SearchReply_User::clear_distance() {
  distance_ = 0;
}
inline float SearchReply_User::distance() const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.User.distance)
  return distance_;
}
inline void SearchReply_User::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:pb.SearchReply.User.distance)
}

// -------------------------------------------------------------------

// SearchReply

// repeated .pb.SearchReply.User users = 1;
inline int SearchReply::users_size() const {
  return users_.size();
}
inline void SearchReply::clear_users() {
  users_.Clear();
}
inline ::pb::SearchReply_User* SearchReply::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SearchReply.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >*
SearchReply::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:pb.SearchReply.users)
  return &users_;
}
inline const ::pb::SearchReply_User& SearchReply::users(int index) const {
  // @@protoc_insertion_point(field_get:pb.SearchReply.users)
  return users_.Get(index);
}
inline ::pb::SearchReply_User* SearchReply::add_users() {
  // @@protoc_insertion_point(field_add:pb.SearchReply.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SearchReply_User >&
SearchReply::users() const {
  // @@protoc_insertion_point(field_list:pb.SearchReply.users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_search_2eproto
